from aiogram import Router
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command
from core.models import UserProfile, Transaction
from analytics.plot_weekly import build_weekly_plot
from analytics.plot_categories import build_category_pie
from datetime import date, timedelta
from analytics.advice import generate_weekly_advice

router = Router()

@router.message(Command("stats"))
async def cmd_stats(message: Message):
    telegram_id = message.from_user.id
    try:
        profile = UserProfile.objects.get(telegram_id=telegram_id)
        user = profile.user
    except UserProfile.DoesNotExist:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
        return

    path = build_weekly_plot(user)
    if not path:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        return

    photo = FSInputFile(path)
    await message.answer_photo(photo, caption="üìä –í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π")


@router.message(Command("categories"))
async def cmd_categories(message: Message):
    telegram_id = message.from_user.id
    try:
        profile = UserProfile.objects.get(telegram_id=telegram_id)
        user = profile.user
    except UserProfile.DoesNotExist:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
        return

    path = build_category_pie(user)
    if not path:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã.")
        return

    photo = FSInputFile(path)
    await message.answer_photo(photo, caption="üìä –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ 7 –¥–Ω–µ–π")

@router.message(Command("summary"))
async def cmd_summary(message: Message):
    telegram_id = message.from_user.id
    try:
        profile = UserProfile.objects.get(telegram_id=telegram_id)
        user = profile.user
    except UserProfile.DoesNotExist:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
        return

    today = date.today()
    start_date = today - timedelta(days=7)

    transactions = Transaction.objects.filter(user=user, date__gte=start_date)

    income = sum(float(t.amount) for t in transactions if t.type == "income")
    expense = sum(float(t.amount) for t in transactions if t.type == "expense")
    balance = income - expense

    text = (
        f"üìã <b>–°–≤–æ–¥–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é</b>:\n\n"
        f"üí∞ –î–æ—Ö–æ–¥: {income:,.0f} ‚ÇΩ\n"
        f"üí∏ –†–∞—Å—Ö–æ–¥: {expense:,.0f} ‚ÇΩ\n"
        f"üìä –ë–∞–ª–∞–Ω—Å: {'+' if balance >= 0 else ''}{balance:,.0f} ‚ÇΩ"
    )

    await message.answer(text, parse_mode="HTML")


@router.message(Command("advise"))
async def cmd_advise(message: Message):
    telegram_id = message.from_user.id
    try:
        profile = UserProfile.objects.get(telegram_id=telegram_id)
        user = profile.user
    except UserProfile.DoesNotExist:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
        return

    text = generate_weekly_advice(user)
    await message.answer(f"üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n{text}")


