from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from core.models import Transaction, UserProfile
from django.contrib.auth.models import User
from datetime import date, timedelta
from aiogram.fsm.context import FSMContext

router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message):
    telegram_id = message.from_user.id
    try:
        UserProfile.objects.get(telegram_id=telegram_id)
        await message.answer("üëã –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    except UserProfile.DoesNotExist:
        user = User.objects.create_user(username=f"user_{telegram_id}")
        UserProfile.objects.create(user=user, telegram_id=telegram_id)
        await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

    await message.answer(
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äì —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/help ‚Äì —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"
    )


@router.message(Command("today"))
async def cmd_today(message: Message):
    telegram_id = message.from_user.id
    try:
        profile = UserProfile.objects.get(telegram_id=telegram_id)
        user = profile.user
    except UserProfile.DoesNotExist:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
        return

    today = date.today()
    transactions = Transaction.objects.filter(user=user, date=today)

    if not transactions:
        await message.answer("–°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.")
        return

    text = "–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n"
    for t in transactions:
        text += f"{t.get_type_display()} ‚Äî {t.amount} ({t.category.name})\n"
    await message.answer(text)

@router.message(Command("week"))
async def cmd_week(message: Message):
    telegram_id = message.from_user.id
    try:
        profile = UserProfile.objects.get(telegram_id=telegram_id)
        user = profile.user
    except UserProfile.DoesNotExist:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
        return

    start_date = date.today() - timedelta(days=7)
    transactions = Transaction.objects.filter(user=user, date__gte=start_date)

    if not transactions:
        await message.answer("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    text = "–û–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ –Ω–µ–¥–µ–ª—é:\n"
    for t in transactions:
        text += f"{t.date}: {t.get_type_display()} ‚Äî {t.amount} ({t.category.name})\n"
    await message.answer(text)

@router.message(Command("help"))
async def cmd_help(message: Message):
    text = (
        "<b>FinControl ‚Äî Telegram-–±–æ—Ç —É—á—ë—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤</b>\n\n"
        "üìå <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞\n"
        "/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é\n"
        "/today ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/week ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "/summary ‚Äî –¥–æ—Ö–æ–¥, —Ä–∞—Å—Ö–æ–¥, –±–∞–ª–∞–Ω—Å –∑–∞ 7 –¥–Ω–µ–π\n"
        "/stats ‚Äî –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –¥–Ω—è–º\n"
        "/categories ‚Äî –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
        "/setlimit ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥ (–≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ)"
    )
    await message.answer(text, parse_mode="HTML")

@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä —Å /add.")