from datetime import date, timedelta
from core.models import Transaction

def generate_weekly_advice(user):
    today = date.today()
    start_date = today - timedelta(days=7)

    transactions = Transaction.objects.filter(user=user, date__gte=start_date)

    if not transactions.exists():
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."

    advice_lines = []

    # –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥
    total_expense = sum(float(t.amount) for t in transactions if t.type == "expense")
    if total_expense > 10000:
        advice_lines.append("‚ö†Ô∏è –í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é –ø—Ä–µ–≤—ã—Å–∏–ª–∏ 10 000 ‚ÇΩ")

    # –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    category_totals = {}
    for t in transactions:
        if t.type != "expense":
            continue
        cat = t.category.name
        category_totals[cat] = category_totals.get(cat, 0) + float(t.amount)

    for cat, amount in category_totals.items():
        if amount > 3000:
            advice_lines.append(f"üí° –í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ {cat} {amount:.0f} ‚ÇΩ –∑–∞ –Ω–µ–¥–µ–ª—é ‚Äî —ç—Ç–æ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ.")

    if not advice_lines:
        return "‚úÖ –í—Å—ë —Å—Ç–∞–±–∏–ª—å–Ω–æ. –†–∞—Å—Ö–æ–¥—ã –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º."

    return "\n".join(advice_lines)
